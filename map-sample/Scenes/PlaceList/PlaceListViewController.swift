//
//  PlaceListViewController.swift
//  map-sample
//
//  Created by inomera on 12.11.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PlaceListDisplayLogic: class
{
  func displayPlaces(viewModel: PlaceList.PlaceModel.ViewModel)
}

class PlaceListViewController: UIViewController, PlaceListDisplayLogic, BaseTableViewController
{
  var interactor: PlaceListBusinessLogic?
  var router: (NSObjectProtocol & PlaceListRoutingLogic & PlaceListDataPassing)?
  var dataSource: TableViewDataSource<Place>!

  @IBOutlet weak var tableView: UITableView!
  @IBOutlet weak var searchBar: UISearchBar!

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self

    let client = ApiClientImplementation(urlSession: URLSession(configuration: URLSessionConfiguration.default))
    let gateway = ApiPlacesGatewayImplementation(apiClient: client)
    let placesUseCase = DisplayPlacesListUseCaseImplementation(placesGateway: gateway)

    let interactor = PlaceListInteractor()
    let presenter = PlaceListPresenter()
    let router = PlaceListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    interactor.worker = PlaceListWorker(displayPlacesUseCase: placesUseCase)
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    configureTableView()
    setupUI()
  }
  
  private func configureTableView() {
    dataSource = PlaceListDataSource()

    tableView.register(type: PlaceListTableCell.self)
    tableView.dataSource = dataSource
    tableView.delegate = delegate
    tableView.tableFooterView = UIView()
    tableView.separatorStyle = .none
  }
  
  private func setupUI() {
    searchBar.delegate = self
  }
  
  // MARK: Search Places
  
  func searchPlaces(text: String)
  {
    let request = PlaceList.PlaceModel.Request(query: text)
    interactor?.fetchPlaces(request: request)
  }
  
  func displayPlaces(viewModel: PlaceList.PlaceModel.ViewModel)
  {
    show(items: viewModel.places)
  }
}

extension PlaceListViewController: UISearchBarDelegate {
  func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
    self.searchBar.showsCancelButton = true
  }
  
  func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
    searchBar.showsCancelButton = false
    searchBar.text = nil
    searchBar.resignFirstResponder()
  }

  func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {

  }
  
  func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
    if let text = searchBar.text {
      searchPlaces(text: text)
    } else {
      
    }
  }
}

extension PlaceListViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    
  }
}
